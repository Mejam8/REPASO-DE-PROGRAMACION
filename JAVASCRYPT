## Primeros pasos de JavaScript ##
https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Variables





>> ¿Qué es JavaScript?
  - Es un lenguaje de secuencias de comandos o de programación que le permite implementar funciones complejas en páginas web.
  - Es la tercera capa del pastel abajo hacia arriba (java, css y html) de capas de tecnologías web estándar, dos de las cuales ( HTML y CSS )
    hemos cubierto con mucho más detalle en otras partes del Área de aprendizaje.

>> HTML es el lenguaje de marcado que usamos para estructurar y dar significado a nuestro contenido web, por ejemplo, 
definir párrafos, encabezados y tablas de datos, o incrustar imágenes y videos en la página.

>> CSS es un lenguaje de reglas de estilo que usamos para aplicar estilo a nuestro contenido HTML, por ejemplo, 
establecer colores de fondo y fuentes, y diseñar nuestro contenido en varias columnas.

>> JavaScript es un lenguaje de secuencias de comandos que le permite crear 
contenido de actualización dinámica, controlar multimedia, animar imágenes y casi todo lo demás.

------------------------------------------- 

## Orden de ejecución de JavaScript ##

  - lo ejecuta en orden, de arriba a abajo. Esto significa que debe tener cuidado con el orden en que coloca las cosas. 
** # Nota #: Este es un error muy común en la orden de ejecucion: 
  - debe tener cuidado de que los objetos a los que se hace referencia en su código existan antes de intentar hacerles algo.
  
------------------------------------------- 

## Código interpretado VS código compilado ##

>>  En los lenguajes interpretados: 
  - el código se ejecuta de arriba a abajo y el resultado de la ejecución del código se devuelve inmediatamente.
No tiene que transformar el código, El código se recibe en su forma de texto amigable para el programador y se procesa directamente a partir de ahí.
>> Los lenguajes compilados:
  - se transforman (compilan) en otra forma (formato binario) partir del código fuente del programa original antes de que la computadora los ejecute.
  
------------------------------------------- 

## Código del lado del servidor VS código del lado del cliente ##
>> Codigo del lado del cliente:
  - El código del lado del cliente es un código que se ejecuta en la computadora del usuario: cuando se ve una página web,
el código del lado del cliente de la página se descarga, luego se ejecuta y se muestra en el navegador.

>> Codigo del lado del servidor:
  - El código del lado del servidor, por otro lado, se ejecuta en el servidor, 
luego sus resultados se descargan y se muestran en el navegador.
   EJEMPLOS  de lenguajes web populares del lado del servidor incluyen PHP, Python, Ruby, ASP.NET y... ¡JavaScript! JavaScript 
   también se puede utilizar como lenguaje del lado del servidor, por ejemplo, en el popular entorno Node.js
   
 ------------------------------------------- 
 
 ## Código dinámico VS estático ##
 >> La palabra dinámica:
 El significado es ligeramente diferente en los dos contextos, 
 pero está relacionado, y ambos enfoques (del lado del servidor y del lado del cliente) generalmente funcionan juntos.
 
 >> estática:
 Una página web sin contenido que se actualiza dinámicamente; simplemente muestra el mismo contenido todo el tiempo.
 
 ------------------------------------------- 
 
 ## Almacenamiento de la información que necesita — Variables ##
 
 >> ¿Qué es una variable?
  - Es un contenedor de un valor, como un número que podríamos usar en una suma o una cadena que podríamos usar como parte de una oración.
  las variables es que pueden contener casi cualquier cosa, no solo cadenas y números. pueden contener 
  datos complejos e incluso funciones completas para hacer cosas increíbles.
  ** NOTA: Decimos que las variables contienen valores. Esta es una distinción importante que hacer.
  Las variables no son los valores en sí mismos; son contenedores de valores. 
  Puedes pensar en ellos como pequeñas cajas de cartón en las que puedes guardar cosas.
  
  ------------------------------------------- 
  
  >> Declarar una variable <<
  Para usar una variable, primero debe crearla; de manera más precisa, 
  llamamos a esto declarar la variable. Para ello, escribimos la palabra clave > let < seguida
  del nombre con el que queremos llamar a nuestra variable:
let myName;
let myAge;
  ** NOTA: Nota: en JavaScript, todas las instrucciones del código deben terminar con un punto y coma ( ; )
  
  AL NO DECLARAR LA VARIABLE, ES UN CONTENEDOR VACIO, Y RETURN --->> CON ERROR, Y SI SE DECLARA HACE UN RETURN ->> 'UNDEFINED'
   ** NOTA: no confunda una variable que existe (ESTA DECLARADA) pero que no tiene un valor definido con una variable que no existe (NO FUE DECLARADA) en absoluto.
   
------------------------------------------- 
 
 >> Inicializar una variable <<
  - Una vez que haya declarado una variable, puede inicializarla con un valor. 
  Para ello, escriba el nombre de la variable, seguido de un signo igual ( = )
  myName = 'Chris';
  myAge = 37;
  ** NOTA: Puede declarar e inicializar una variable al mismo tiempo, así:
let myDog = 'Rover';

-------------------------------------------   

  >> >> sobre > var <
  una forma diferente de declarar variables, usando la > var < palabra clave:
var myName;
var myAge;
    ** NOTA: AL PRINCIPIO DE JAVA SE EMPEZO USANDO   > VAR <   PERO DABA MUCHO ERRORES Y LAS NUEVAS
    VERSIONES USAN    > LET <.
-------------------------------------------      
  ## BLOCK Y LABEL ##  
    
  > BLOCK O BLOQUE: Una declaración de bloque || declaración compuesta,
    - El bloque está delimitado por un par de llaves >  { } < 
    - Se usa para agrupar cero o más declaraciones. 
    - Opcionalmente se puede etiquetar :
  
                      >> LAS LABEL O ETIQUETAS: 
                                - SE UTILIZA UN LABEL QUE IDENTIFICA QUE NO SEA UNA PALABRA RESERVADA. QUE SE DECLARA === STATEMENT
                                - LOS LABEL===ETIQUETA IDENTIFICA EL BUCLE Y LUEGO LOS DECLARA===STATEMENT CON break || continue; 
                                - Que se usa para interrumpir(break) el ciclo o continuar(continue) su ejecución.
                                         break: se puede usar con cualquier declaración etiquetada. NO NECESARIAMENTE UN BUCLE; EJ: UN BLOQUE > { } <
                                         continue: se puede usar con declaraciones etiquetadas en bucle.
  
    Continuaicon del BLOCK || BLOQUE
    - Le permite usar múltiples declaraciones donde JavaScript espera solo una declaración.
    - LOS BLOCK SE USAN COMUNMENTE POR > if...else < || > for <
   REGLAS DE BLOCK SCOPE:
   > var < || > function statement : NO ES ESTRICTO, NO TIENE BLOCK SCOPE. >> EJ: AL SER UN STATEMENT NO ESTRICTA, NO TIENE UN IMPEDIMENTO AL BLOCK OSEA SE EJECUTARA LA ULTIMA DECLARACION
   > let < || > const < : ES ESTRICTO, TIENE BLOCK SCOPE. >> EJ: AL SER UN STATEMENT ESTRICTA, TIENE IMPEDIMENTO AL BLOCK Y NO VA A TOMARLO EN CUENTA.

   ******** REFERENCIA (BLOCK) URL: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block
   ******** REFERENCIA (ETIQUETAS) URL: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label

 -------------------------------------------  
 
 ## Alcance de JavaScript ##
 
>> El alcance: 
   - Es el conjunto de reglas que se definen en un lenguaje de programación para determinar el valor de una variable.
     
   - El valor de una variable se define por su posición cuando se escribe. No cuando se llama.
   
  ** NOTA: El alcance es el conjunto de variables visibles para una parte del programa.
   
>> Tenemos alcance global %% alcance de bloque %% alcance de función; lo que significa que está disponible en todas las partes de un programa.

 ******** REFERENCIA (PARAMETRO DE VARIABLE EN UNA FUNCION) URL: https://desarrolloweb.com/articulos/585.php#:~:text=Los%20par%C3%A1metros%20se%20usan%20para,entrada%20que%20recibe%20una%20funci%C3%B3n.
   ******** REFERENCIA (ALCANCE) URL:https://github.com/Mejam8/REPASO-DE-PROGRAMACION/edit/main/JAVASCRYPT
 -------------------------------------------  
 
    
## Diferencia  entre >var<, >let< y >const< declaraciones ##

>> Una variable definida como >var< dentro de una función solo es visible dentro de esa función. Al igual que los parámetros de función.

>> Una variable definida como >const< o > let< por otro lado, solo es visible dentro de ese bloque donde reside.
 
 Es importante comprender que un bloque no define un nuevo alcance para >var<, pero lo hace por >let< y >const<.
 Un nuevo alcance para >var< solo se crea cuando se crea una función, porque >var< no tiene alcance de bloque(BLOCK SCOPE), si no alcance de función.
 
 Dentro de una función, cualquier >var< La variable definida en él es visible en todo el código de la función,
 incluso si la variable se declara al final de la función, aún se puede hacer referencia al principio, 
 porque JavaScript antes de ejecutar el código en realidadmueve todas las declaraciones de variables en la parte superior(algo que se llamalevantando). 
 Para evitar confusiones, declare siemprevarvariables al comienzo de una función.

 -------------------------------------------  
 
 
 ## Continuaciohnj Variables >>>
 
## las reglas de nomenclatura de variables ##
 - Puedes llamar a una variable prácticamente como quieras, pero hay limitaciones. 
 - Debe limitarse a usar solo caracteres latinos (0-9, az, AZ) y el carácter de subrayado.
 - No debe usar otros caracteres porque pueden causar errores o ser difíciles de entender para una audiencia internacional.
 - No use guiones bajos al comienzo de los nombres de las variables; esto se usa en ciertas construcciones de JavaScript para significar cosas específicas, 
   por lo que puede resultar confuso.
 - No utilice números al principio de las variables. Esto no está permitido y provoca un error.
 - Una convención segura a seguir es la llamada "minúscula camello" , en la que se unen varias palabras,
   usando minúsculas para la primera palabra completa y luego mayúsculas para las palabras siguientes.
 - Haga que los nombres de las variables sean intuitivos, para que describan los datos que contienen. 
   No use solo letras/números individuales, o frases grandes y largas.
 - Las variables distinguen entre mayúsculas y minúsculas, al igual myageque una variable diferente de myAge.
 - IMPORTANTE no se puede usar palabras reservadas (var, let, const, function, etc...)
   URL: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords
 
 
 
 
 
 
 
 
  
 

